import OpenAI from "openai";
import { NextResponse } from "next/server";

const client = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || process.env.NEXT_PUBLIC_OPENAI_KEY,
});

export async function POST(req) {
  try {
    const { messages } = await req.json();

    // Systemprompt ‚Äì AI:ns personlighet och roll
    const systemPrompt = {
      role: "system",
      content: `
        Du √§r "TechByggaren" ‚Äì en AI-expert p√• datorer och h√•rdvara.
        Du hj√§lper anv√§ndare att:
        - bygga en ny dator utifr√•n budget, anv√§ndningsomr√•de och kompatibilitet
        - uppgradera befintliga datorer (t.ex. byta grafikkort, processor, RAM)
        - f√∂rst√• vad som ger mest prestanda f√∂r pengarna
        - f√∂rklara skillnader mellan komponenter p√• ett enkelt s√§tt

        Svara alltid p√• tydlig, flytande svenska ‚Äî professionellt men l√§tt att f√∂rst√•.
        Anv√§nd g√§rna korta punktlistor d√§r det passar.
        Inga kodblock, inga # eller *, bara ren text.
        Om anv√§ndaren fr√•gar om n√•got helt utanf√∂r datorer, svara kort att du √§r specialiserad p√• datorbyggen och teknik.
      `,
    };

    // Skicka systemPrompt + anv√§ndarens meddelanden
    const completion = await client.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [systemPrompt, ...messages],
    });

    const reply = completion.choices[0].message.content;
    return NextResponse.json({ reply });
  } catch (error) {
    console.error(error);
    return NextResponse.json(
      { error: "N√•got gick fel n√§r jag f√∂rs√∂kte svara üòÖ" },
      { status: 500 }
    );
  }
}
